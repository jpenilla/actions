name: 'Run CI'

on:
  workflow_call:
    inputs:
      jdk-version:
        type: number
        description: 'JDK runtime version for the build'
        required: false
        default: 17
      validate-gradle-wrapper:
        type: boolean
        description: 'Apply validate gradle wrapper action'
        required: false
        default: true
      init-submodules:
        type: boolean
        description: 'Init submodules'
        required: false
        default: false
      setup-gradle:
        type: boolean
        description: 'Apply gradle-build-action'
        required: false
        default: true
      artifacts-path:
        type: string
        description: 'Path of artifact(s) to upload per upload-artifact spec. Blank uploads no artifacts.'
        required: false
        default: ''
      loom:
        type: boolean
        description: 'Enable caching for loom project caches'
        required: false
        default: false
      paperweight:
        type: boolean
        description: 'Enable caching for paperweight project caches'
        required: false
        default: false
      vanillagradle:
        type: boolean
        description: 'Enable caching for VanillaGradle project caches'
        required: false
        default: false
      hangar-publish:
        type: boolean
        required: false
        default: false
      modrinth-publish:
        type: boolean
        required: false
        default: false
    secrets:
      HANGAR_UPLOAD_KEY:
        required: false

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    steps:
      - name: "checkout git repository"
        uses: actions/checkout@v4
      - name: "validate gradle wrapper"
        uses: gradle/wrapper-validation-action@v1
        if: ${{ inputs.validate-gradle-wrapper }}
      - name: "init submodules"
        if: ${{ inputs.init-submodules }}
        run: "git submodule update --init --recursive"
      - name: "setup jdk ${{ inputs.jdk-version }}"
        uses: "actions/setup-java@v3"
        with:
          distribution: "temurin"
          java-version: "${{ inputs.jdk-version }}"
      - name: "setup gradle"
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.setup-gradle }}
        # gradle-build-action doesn't support caching files in the project dir
      - name: "cache project local caches"
        uses: actions/cache@v3
        if: ${{ inputs.loom || inputs.paperweight || inputs.vanillagradle }}
        with:
          # we cache all three in the same tarball because they will probably have similar files which can compress better together
          path: |
            .gradle/loom-cache
            .gradle/caches/VanillaGradle
            **/.gradle/caches/paperweight
          key: ${{ runner.os }}-project-local-gradle-caches-${{ hashFiles('**/libs.versions.*', '**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-project-local-gradle-caches-
      - name: "execute gradle build"
        run: ./gradlew build
      - name: "determine status"
        if: ${{ inputs.hangar-publish || inputs.modrinth-publish }}
        run: |
          if [ "$(./gradlew properties | awk '/^version:/ { print $2; }' | grep '\-SNAPSHOT')" ]; then
            echo "STATUS=snapshot" >> $GITHUB_ENV
          else
            echo "STATUS=release" >> $GITHUB_ENV
          fi
      - name: "publish release to hangar"
        if: "${{ inputs.hangar-publish && env.STATUS == 'release' && github.event_name == 'release' }}"
        run: ./gradlew publishAllPublicationsToHangar
        env:
          HANGAR_UPLOAD_KEY: "${{ secrets.HANGAR_UPLOAD_KEY }}"
          RELEASE_NOTES: "${{ github.event.release.body }}"
      - name: "publish release to modrinth"
        if: "${{ inputs.modrinth-publish && env.STATUS == 'release' && github.event_name == 'release' }}"
        run: ./gradlew modrinth
        env:
          MODRINTH_TOKEN: "${{ secrets.MODRINTH_TOKEN }}"
          RELEASE_NOTES: "${{ github.event.release.body }}"
      - name: "upload artifacts"
        uses: actions/upload-artifact@v3
        if: ${{ inputs.artifacts-path != '' }}
        with:
          name: artifacts
          path: ${{ inputs.artifacts-path }}
